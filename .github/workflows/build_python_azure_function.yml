name: Build Python Azure Function

on:
  workflow_call:
    inputs:
      PYTHON_VERSION:
        required: true
        type: string
      BUILD_PATH:
        required: true
        type: string
      ARTIFACT_NAME:
        required: true
        type: string
      IGNORE_PEP8:
        required: true
        type: string
      TEST_DIR:
        description: "Directory with tests (test_*.py) to run"
        type: string
        default: tests
      VENV_NAME:
        description: "Name of the virtual environment"
        type: string
        default: .venv
      FAIL_MIN_COVERAGE:
        description: "Whether to fail job complete job if coverage is below minimum"
        type: boolean
        default: false 

env:
  OUTPUT_DIR: output
  ZIP_FILE_NAME: ${{ inputs.ARTIFACT_NAME }}.zip

jobs:
  build:
    name: Build Azure Function
    runs-on: ubuntu-latest
    defaults:
      run:
        #Working directory for all 'run' steps
        working-directory: ${{ inputs.BUILD_PATH }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.PYTHON_VERSION }}

      - name: Create and start a Python virtual environment
        run: |
          pip3 install virtualenv  
          python3 -m virtualenv ${{ inputs.VENV_NAME }} --python="python${{ inputs.PYTHON_VERSION }}"
          source ${{ inputs.VENV_NAME }}/bin/activate

      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip setuptools wheel
          pip install flake8 pytest pytest-cov
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements.dev.txt ]; then pip install -r requirements.dev.txt; fi

      - name: Lint with flake8
        run: |
          # Stop build if there are any Python syntax errors, undefined names or other PEP8 violations
          flake8 . --exclude ${{ inputs.VENV_NAME }},worker_venv,.python_packages --ignore=${{ inputs.IGNORE_PEP8 }}

          # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
      - name: Run unit tests
        run: |
          python3 -m pytest ${{ inputs.TEST_DIR }} --cov --cov-report xml:coverage.xml --cov-config=.coveragerc
      
      - name: Code Coverage Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: coverage.xml
          badge: true
          fail_below_min: ${{ inputs.FAIL_MIN_COVERAGE }}
          format: markdown
          hide_branch_rate: false
          hide_complexity: true
          indicators: true
          output: both
          thresholds: '60 80'
      
      - name: Show coverage report summary
        run: |
          cat code-coverage-results.md >> $GITHUB_STEP_SUMMARY
    
      - name: Add Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          recreate: true
          path: code-coverage-results.md  

      - name: Create package folder
        run: |
          mkdir ${{ env.OUTPUT_DIR }}
          zip -r ${{ env.OUTPUT_DIR }}/${{ env.ZIP_FILE_NAME }} .

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.ARTIFACT_NAME }}
          path: ${{ inputs.BUILD_PATH }}/${{ env.OUTPUT_DIR }}/${{ env.ZIP_FILE_NAME }}
          if-no-files-found: error
