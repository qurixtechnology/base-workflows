name: Run Python Tests

on:
  workflow_call:
    inputs:
      PYTHON_VERSION:
        required: true
        type: string
      ROOT_PATH:
        description: "Root directory of the Python"
        required: true
        type: string
        default: .
      CURRENT_BRANCH:
        required: true
        type: string
        default: ${{ github.ref }}
      TEST_DIR:
        description: "Directory with tests (test_*.py) to run"
        required: true
        type: string
        default: tests
      VENV_NAME:
        description: "Name of the virtual environment"
        required: true
        type: string
        default: .venv
      FAIL_MIN_COVERAGE:
        description: "Whether to fail job complete job if coverage is below minimum"
        type: boolean
        default: false
      MYPY:
        required: false
        type: boolean
        default: false
      RUN_INTEGRATION_TESTS:
        description: "Whether to run integration tests"
        type: boolean
        default: false
      PAT_TOKEN:
        required: true
        type: string
      ORGANIZATION:
        required: true
        type: string

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    defaults:
      run:
        # Working directory for all 'run' steps
        working-directory: ${{ inputs.ROOT_PATH }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.PYTHON_VERSION }}

      - name: Create and start a Python virtual environment
        run: |
          pip3 install virtualenv  
          python3 -m virtualenv ${{ inputs.VENV_NAME }} --python="python${{ inputs.PYTHON_VERSION }}"
          source ${{ inputs.VENV_NAME }}/bin/activate

      - name: prepare requirements.txt
        env:
          PAT_TOKEN: ${{ inputs.PAT_TOKEN }}
          ORGANIZATION: ${{ inputs.ORGANIZATION }}
        run: |
          sed 's/@PAT_TOKEN/'"$PAT_TOKEN"'/g;s/@ORGANIZATION/'"$ORGANIZATION"'/g' requirements.template.txt > requirements.txt

      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip setuptools wheel
          python3 -m pip install ruff pytest pytest-cov pytest-integration black isort
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements.dev.txt ]; then pip install -r requirements.dev.txt; fi

      - name: Lint with ruff
        run: |
          # This assumes that a ruff.toml or pyproject.toml is included. If not a default configuration is taken
          ruff check .

      - name: Mypy (static type check)
        if: ${{ inputs.MYPY }}
        run: |
          python3 -m pip install mypy
          mypy . --exclude ${{ inputs.VENV_NAME }}

      - name: Black check (PEP style check)
        run: black --check . --exclude ${{ inputs.VENV_NAME }}

      - name: Sorted imports check
        run: isort --check --profile black .

      - name: Run unit & integration tests and calculate coverage
        if: ${{ inputs.RUN_INTEGRATION_TESTS }}
        run: |
          python3 -m pytest ${{ inputs.TEST_DIR }} --cov --cov-report xml:coverage.xml --cov-config=.coveragerc

      - name: Run unit tests and calculate coverage
        if: ${{ !inputs.RUN_INTEGRATION_TESTS }}
        run: |
          python3 -m pytest --without-integration ${{ inputs.TEST_DIR }} --cov --cov-report xml:coverage.xml --cov-config=.coveragerc

      - name: Code Coverage Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: coverage.xml
          badge: true
          fail_below_min: ${{ inputs.FAIL_MIN_COVERAGE }}
          format: markdown
          hide_branch_rate: false
          hide_complexity: true
          indicators: true
          output: both
          thresholds: "60 80"

      - name: Show coverage report summary
        run: |
          cat code-coverage-results.md >> $GITHUB_STEP_SUMMARY

      - name: Add Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          recreate: true
          path: code-coverage-results.md
